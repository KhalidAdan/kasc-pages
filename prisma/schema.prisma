// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  url             = env("DATABASE_URL")
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Book {
  id           String    @id @default(uuid())
  title        String    @unique
  image        String?
  locked       Boolean   @default(false)
  folders      Folder[]
  createdDate  DateTime  @default(now())
  seeded       Boolean   @default(false)
  authoredBy   String?
  modifiedDate DateTime?
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?
}

model Document {
  id                String        @id @default(uuid())
  title             String?
  subtitle          String?
  state             DocumentState @default(DRAFT)
  htmlContent       String        @default("<p><br></p>") @db.LongText
  displayOrder      Int
  locked            Boolean       @default(false)
  Folder            Folder?       @relation(fields: [folderId], references: [id])
  folderId          String?
  markedForDeletion DateTime?
  createdDate       DateTime      @default(now())
  modifiedDate      DateTime?
}

enum DocumentState {
  DRAFT
  PUBLISHED
}

model Folder {
  id                String     @id @default(uuid())
  documents         Document[]
  title             String
  folderId          String?    @unique
  parent            Folder?    @relation("Parent", fields: [folderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child             Folder?    @relation("Parent")
  markedForDeletion DateTime?
  canBeDeleted      Boolean?   @default(true)
  Books             Book?      @relation(fields: [bookId], references: [id])
  bookId            String?
  createdDate       DateTime   @default(now())
  modifiedDate      DateTime?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(uuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  role            Role             @default(USER)
  onboarded       Boolean?         @default(false)
  accounts        Account[]
  sessions        Session[]
  books           Book[]
  userPreferences UserPreferences?
}

model UserPreferences {
  id                 String @id @default(uuid())
  selectedFont       String @default("Lora")
  selectedLineHeight Float  @default(1.75)
  User               User   @relation(fields: [userId], references: [id])
  userId             String @unique
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
